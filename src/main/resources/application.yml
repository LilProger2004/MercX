spring:
  servlet:
    multipart:
      max-request-size: 2000MB
      max-file-size: 2000MB
  application:
    name: mercX
  jpa:
    properties:
      hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    hibernate:
      ddl-auto: update
  datasource:
#      username: postgres
#      password: root
#      url: jdbc:postgresql://db:5432/mercX
      driverClassName: org.postgresql.Driver

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://keycloak:8085/realms/Freelance-Exchange
      client:
        registration:
          Freelance-Exchange:
            client-id: MercX
            client-secret: SYtPBftMe9d8jM8VsBayG0CGOOHA4P8g
            provider: Freelance-Exchange
            scope:
              - openid
              - profile
              - email
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
        provider:
          Freelance-Exchange:
            #issuer-uri: http://172.19.0.2:8080/realms/mercx-realm  # для Spring Boot
            authorization-uri: http://localhost:8085/realms/Freelance-Exchange/protocol/openid-connect/auth
            token-uri: http://keycloak:8085/realms/Freelance-Exchange/protocol/openid-connect/token
            jwk-set-uri:  http://keycloak:8085/realms/Freelance-Exchange/protocol/openid-connect/certs
#            authorization-uri: http://localhost:8085/realms/Freelance-Exchange/protocol/openid-connect/auth
#            token-uri: http://localhost:8085/realms/Freelance-Exchange/protocol/openid-connect/token
#            jwk-set-uri:  http://localhost:8085/realms/Freelance-Exchange/protocol/openid-connect/certs
logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG

keycloak:
   server-url: http://keycloak:8085
   realm: Freelance-Exchange
   client-id: MercX
   client-secret: SYtPBftMe9d8jM8VsBayG0CGOOHA4P8g

server:
  port: 8081

upload:
  path: /app/uploads